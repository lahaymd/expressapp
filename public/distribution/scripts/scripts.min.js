"use strict";

config.$inject = ["$stateProvider", "$urlRouterProvider", "$locationProvider"];angular.module('myApp').config(config);

function config($stateProvider, $urlRouterProvider, $locationProvider) {
  $urlRouterProvider.otherwise('/');
  $locationProvider.html5Mode(true);
  $stateProvider.state('login', {
    url: '/',
    templateUrl: '/partials/login',
    // controller: 'LoginController',
    controllerAs: 'vm'
  }).state('users', {
    url: '/users',
    templateUrl: '/partials/users',
    controller: 'UserController'
  }).state('users.detail', {
    url: '/:id',
    templateUrl: '/partials/selecteduser',
    controller: 'UserController'
  }).state('register', {
    url: '/register',
    templateUrl: '/partials/register',
    controller: 'RegisterController',
    controllerAs: 'vm'
  }).state('api', {
    url: '/api/user',
    templateUrl: '/partials/users',
    controller: 'UserController'
  }).state('directive', {
    url: '/directive',
    templateUrl: '/partials/directive',
    controller: 'ExampleController'
  }).state('readerboard', {
    url: '/readerboard',
    templateUrl: '/partials/readerboard',
    controller: 'ReaderboardController',
    controllerAs: 'vm'

  });
}
'use strict';

angular.module('myApp', ['ui.router', 'ngAnimate', 'ngMessages', 'ngMaterial']).config(["$mdThemingProvider", function ($mdThemingProvider) {
	$mdThemingProvider.theme('default').primaryPalette('yellow').accentPalette('pink').backgroundPalette('orange');
}]);
'use strict';

angular.module('myApp').factory('AuthService', ['$q', '$timeout', '$http', function ($q, $timeout, $http) {

  // create user variable
  var user = null;
  // return available functions for use in the controllers
  var service = {
    isLoggedIn: isLoggedIn,
    getUserStatus: getUserStatus,
    login: login,
    logout: logout,
    register: register,
    getUsers: getUsers,
    find: find,
    remove: remove,
    update: update
  };

  return service;

  function update(id) {
    var deferred = $q.defer();
    $http.put('/api/users/' + id._id, id).success(function (user) {
      console.log(user);
      deferred.resolve(user);
    }).error(function (error) {
      deferred.reject(error);
    });
    return deferred.promise;
  }

  function remove(id) {

    var deferred = $q.defer();
    $http.delete('api/users/' + id).success(function (user) {
      deferred.resolve(user);
    }).error(function (error) {
      deferred.reject(error + '!!');
    });
    return deferred.promise;
  }

  function find(id) {
    var deferred = $q.defer();
    $http.get('/api/users/' + id).success(function (user) {
      deferred.resolve(user);
    }).error(function (error) {
      deferred.reject(error + '!');
    });
    return deferred.promise;
  }

  function getUsers() {
    var deferred = $q.defer();
    $http.get('/api/users').success(function (users) {
      deferred.resolve(users);
    }).error(function (error) {
      deferred.reject(error + '!');
    });
    return deferred.promise;
  }

  function isLoggedIn() {
    if (user) {
      return true;
    } else {
      return false;
    }
  }

  function getUserStatus() {
    return $http.get('/user/status')
    // handle success
    .success(function (data) {
      if (data.status) {
        user = true;
      } else {
        user = false;
      }
    })
    // handle error
    .error(function (data) {
      user = false;
    });
  }

  function login(username, password) {

    // create a new instance of deferred
    var deferred = $q.defer();

    // send a post request to the server
    $http.post('/user/login', { username: username, password: password })
    // handle success
    .success(function (data, status) {
      if (status === 200 && data.status) {
        user = true;
        deferred.resolve();
      } else {
        user = false;
        deferred.reject();
      }
    })
    // handle error
    .error(function (data) {
      user = false;
      deferred.reject();
    });

    // return promise object
    return deferred.promise;
  }

  function logout() {

    // create a new instance of deferred
    var deferred = $q.defer();

    // send a get request to the server
    $http.get('/user/logout')
    // handle success
    .success(function (data) {
      user = false;
      deferred.resolve();
    })
    // handle error
    .error(function (data) {
      user = false;
      deferred.reject();
    });

    // return promise object
    return deferred.promise;
  }

  function register(username, password) {

    // create a new instance of deferred
    var deferred = $q.defer();

    // send a post request to the server
    $http.post('/api/users', { username: username, password: password })
    // handle success
    .success(function (response) {
      deferred.resolve(response);
    }).error(function (response) {
      defer.reject(response);
    });

    // return promise object
    return deferred.promise;
  }
}]);
'use strict';

angular.module('myApp').controller('ExampleController', ["$scope", "$mdToast", function ($scope, $mdToast) {
	$scope.date = new Date();
	$scope.ctrlName = 'foo';
	$scope.ctrlFlavor = 'cherry';
	$scope.isDisabled = true;
	$scope.saySomething = function () {
		alert('say something!');
	};
	$scope.someMethod = function (blah) {
		alert(blah);
	};

	$scope.showToast = function () {
		$mdToast.show({
			hideDelay: 5000,
			position: 'top right',
			parent: angular.element(document.querySelector('#toastContainer')),
			template: '<md-toast><span class="md-toast-text" flex>Custom toast!</span><md-button class="md-highlight" ng-click="openMoreInfo($event)">More info</md-button><md-button ng-click="closeToast()">Close</md-button></md-toast>'
		});
	};
}]);
'use strict';

angular.module('myApp').directive('example', function () {
	// Runs during compile
	return {
		// name: '',
		// priority: 1,
		// terminal: true,
		scope: {
			name: '=',
			someMeth: '&',
			dial: '&',
			flavor: '@'
		}, // {} = isolate, true = child, false/undefined = no change
		// controller: ExampleController,
		// require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
		restrict: 'AE', // E = Element, A = Attribute, C = Class, M = Comment
		// template: '',
		templateUrl: '/partials/example-directive',
		// replace: true,
		// transclude: true,
		// compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
		link: function link($scope, iElm, iAttrs, controller) {}
	};
});
'use strict';

(function () {
	angular.module('myApp').controller('NavController', ['$mdSidenav', function ($mdSidenav) {
		var vm = this;
		// vm.isSidenavOpen= false;

		vm.open = function () {
			$mdSidenav('left').toggle();
		};
	}]).controller('ModalController', ['$mdDialog', function ($mdDialog) {
		var ctrl = this;

		ctrl.showAlert = function (event) {
			$mdDialog.show($mdDialog.alert().parent(angular.element(document.querySelector('#popupContainer'))).clickOutsideToClose(true).title('This is an alert title').textContent('You can specify some description text in here.').ariaLabel('Alert Dialog Demo').ok('Got it!').targetEvent(event));
		};
	}]);
})();
'use strict';

(function () {
	angular.module('myApp').controller('ReaderboardController', ["$document", "$log", function ($document, $log) {
		var vm = this;

		vm.clear = function () {
			$document.find('textarea').val('');
		};

		vm.areaOne = function () {
			vm.letters = document.getElementById('one').value.replace(/\s+/g, '').split('').sort().map(function (letter) {
				return letter.toLowerCase().match(/\S/g);
			}).reduce(function (last, now) {
				return last.concat(now);
			}, []).reduce(function (last, now) {
				var index = last[0].indexOf(now);
				if (index === -1) {
					last[0].push(now);
					last[1].push(1);
				} else {
					last[1][index] += 1;
				}
				return last;
			}, [[], []]).reduce(function (last, now, index, context) {
				var zip = [];
				last.forEach(function (word, i) {
					zip.push([word, context[1][i]]);
				});
				return zip;
			});
			console.log('letters', vm.letters);

			vm.lettersTwo = document.getElementById('two').value.replace(/\s+/g, '').split('').sort().map(function (letter) {
				return letter.toLowerCase().match(/\S/g);
			}).reduce(function (last, now) {
				return last.concat(now);
			}, []).reduce(function (last, now) {
				var index = last[0].indexOf(now);
				if (index === -1) {
					last[0].push(now);
					last[1].push(1);
				} else {
					last[1][index] += 1;
				}
				return last;
			}, [[], []]).reduce(function (last, now, index, context) {
				var zip = [];
				last.forEach(function (word, i) {
					zip.push([word, context[1][i]]);
				});
				return zip;
			});

			console.log('lettersTwo', vm.lettersTwo);

			var test = vm.letters.filter(function (item, index, arr) {
				foo = this.map(function (i) {
					return i[0];
				});
				console.log('foo', foo);
				console.log(foo.indexOf(item[0]));

				return foo.indexOf(item[0]) >= 0 || item;
			}, vm.lettersTwo);

			console.log('test: ', test);

			var test2 = vm.lettersTwo.filter(function (item, index, arr) {
				bar = this.map(function (i) {
					return i[0];
				});

				return bar.indexOf(item[0]) >= 0 || item;
			}, vm.letters);

			console.log('test2: ', test2);

			// vm.difference = test.map(function(item, index, array){
			// 				var reformatted = {};
			// 				console.log('item',item[1])
			// 				console.log('this',this[1])
			// 				reformatted[item[0]] = (item[1] - this[index][1])
			// 				return reformatted;

			// }, test2)

			vm.letterDifference = test2.map(function (item, index, array) {
				console.log(item[1]);
				console.log(this.length);
				console.log(this.length > 0 && this[index] !== undefined && this[index].indexOf(item[0]) !== -1 ? this[index][1] : 0);
				// console.log(this[index].indexOf(item[0]))
				// console.log(this[index][1])
				var obj = {};
				if (this.length > 0 && this[index] !== undefined && this[index].indexOf(item[0]) !== -1 ? this[index][1] : 0) {
					obj[item[0]] = item[1] - (this.length > 0 && this[index] !== undefined && this[index].indexOf(item[0]) !== -1 ? this[index][1] : 0);
				} else {
					obj[item[0]] = item[1];
				}
				console.log(obj);
				return obj;
			}, test);

			// vm.letterDifference = test2.map(function(item, index, array){
			// console.log(item[1])
			// console.log(this.length)
			// console.log((((this.length > 0 && this[index] !== undefined && this[index].indexOf(item[0]) !== -1)) ?  this[index][1] : 0))
			// // console.log(this[index].indexOf(item[0]))
			// // console.log(this[index][1])
			// 							var obj = {};
			// 							if(item[1] >  (((this.length > 0 && this[index] !== undefined && this[index].indexOf(item[0]) !== -1)) ?  this[index][1] : 0)){
			// 								obj[item[0]] = item[1] -  ((this.length > 0 && this[index] !== undefined && this[index].indexOf(item[0]) !== -1 ) ? this[index][1] : 0)

			// 							}else{
			// 								obj
			// 							}
			// console.log(obj)
			// 							return obj;
			// },test)
		};
	}]);
})();
'use strict';

(function () {
  angular.module('myApp').controller('RegisterController', ['$location', 'AuthService', function ($location, AuthService) {
    var vm = this;
    vm.registerForm = {};
    vm.register = function () {
      // call register from service
      AuthService.register(vm.registerForm.username, vm.registerForm.password)
      // handle success
      .then(function () {
        // vm.registerForm = data;
        vm.registerForm = {};
        $location.path('/users');
      })
      // handle error
      .catch(function (error) {
        alert(error);
      });
      // vm.registerForm = {};
    };
  }]);
})();
'use strict';

(function () {
  angular.module('myApp').controller('ShowUserController', ['$scope', '$stateParams', 'AuthService', function ($scope, $stateParams, AuthService) {
    $scope.selectedUser = {};

    var refresh = function refresh() {
      AuthService.find($stateParams.id).then(function (user) {
        $scope.selectedUser = user;
        console.log(user, '!!!');
      }, function (error) {
        console.log(error);
      });
    };

    refresh();

    var fetchUsers = function fetchUsers() {
      AuthService.getUsers().then(function (users) {
        $scope.userlist = users;
      }, function (error) {
        console.log(error);
      });
    };

    $scope.updateUser = function () {
      console.log($scope.selectedUser);
      AuthService.update($scope.selectedUser).then(function () {
        console.log('updated from controller');
        fetchUsers();
      }, function (error) {
        console.log('you fucked up');
        console.log(error.message);
      });
    };
  }]);
})();
'use strict';

(function () {
  angular.module('myApp').controller('UserController', ['$scope', '$stateParams', 'AuthService', '$location', '$window', function ($scope, $stateParams, AuthService, $location, $window) {

    $scope.userlist = {};

    var fetchUsers = function fetchUsers() {
      AuthService.getUsers().then(function (users) {
        $scope.userlist = users;
        console.log(users);
      }, function (error) {
        console.log(error);
      });
    };

    fetchUsers();

    $scope.removeUser = function (id) {
      console.log(id);
      $scope.isLoading = true;
      AuthService.remove(id).then(function (user) {
        console.log(user);
        console.log($scope.userlist);
        console.log(id);
        var index = $scope.userlist.findIndex(function (x) {
          return x._id == id;
        });
        $scope.userlist.splice(index, 1);
        console.log('promise returned');
        $scope.isLoading = false;
      });
    };

    $scope.test = 'testing link function';

    $scope.selectedUser = {};

    var refresh = function refresh() {
      AuthService.find($stateParams.id).then(function (user) {
        $scope.selectedUser = user;
        console.log(user, '!!');
      }, function (error) {
        console.log(error);
      });
    };

    refresh();

    $scope.updateUser = function () {
      console.log($scope.selectedUser);
      AuthService.update($scope.selectedUser).then(function (x) {
        var index = $scope.userlist.findIndex(function (x) {
          return x._id == $scope.selectedUser._id;
        });
        console.log(index);
        console.log(x);
        console.log('updated from controller');
        $window.location.reload();

        // $scope.userlist.splice(index, 1, $scope.selectedUser);
        $location.path('/users');
      }, function (error) {
        console.log('you fucked up');
        console.log(error.message);
      });
    };

    $scope.register = function () {
      $scope.isLoading = true;
      // call register from service
      AuthService.register($scope.userlist.username, $scope.userlist.password)
      // handle success
      .then(function (newUser) {
        console.log(newUser);
        $scope.userlist.push(newUser);
        angular.element(document.querySelectorAll('input')).val('');
        $scope.isLoading = false;
        // $scope.registerForm = data;
        // $scope.userlist = {};
        // $location.path('/users')
      })
      // handle error
      .catch(function (error) {
        alert(error);
      });
      // $scope.registerForm = {};
    };
  }]);
})();
'use strict';

(function () {
        angular.module('myApp').directive('myDirective', function () {
                return {
                        restrict: 'E',
                        transclude: true,
                        template: '<div>I am <span ng-transclude></span> directive {{test}}   {{userlist[0].username}}</div>',
                        link: function link(scope, element, attrs) {
                                // console.log(scope.userlist , element , attrs)
                                // scope.test= 'changed text from link function'
                                element.addClass('foo');
                                console.log(parseInt(attrs.bar) + 6);
                        }

                };
        });
})();